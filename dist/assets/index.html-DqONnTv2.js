import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as i}from"./app-WDZXjstu.js";const s={};function p(r,a){return i(),t("div",null,a[0]||(a[0]=[n('<h1 id="第零节-加解密概述" tabindex="-1"><a class="header-anchor" href="#第零节-加解密概述"><span>第零节：加解密概述</span></a></h1><h2 id="base64加密-解密" tabindex="-1"><a class="header-anchor" href="#base64加密-解密"><span>BASE64加密/解密</span></a></h2><p>Base64 编码是我们程序开发中经常使用到的编码方法，它用 64 个可打印字符来表示二进制数据。</p><p>这 64 个字符是：小写字母 a-z、大写字母 A-Z、数字 0-9、符号&quot;+&quot;、&quot;/&quot;（再加上作为垫字的&quot;=&quot;，实际上是 65 个字符），其他所有符号都转换成这个字符集中的字符。</p><p>Base64 编码通常用作存储、传输一些二进制数据编码方法，所以说它本质上是一种将二进制数据转成文本数据的方案。</p><h2 id="md5-message-digest-algorithm-加密" tabindex="-1"><a class="header-anchor" href="#md5-message-digest-algorithm-加密"><span>MD5(Message Digest Algorithm)加密</span></a></h2><p>MD5 是将任意长度的数据字符串转化成短小的固定长度的值的单向操作，任意两个字符串不应有相同的散列值。 因此 MD5 经常用于校验字符串或者文件。</p><p>MD5 主要用做数据一致性验证、数字签名和安全访问认证，而不是用作加密。</p><h2 id="des-data-encryption-standard-对称加密-解密" tabindex="-1"><a class="header-anchor" href="#des-data-encryption-standard-对称加密-解密"><span>DES(Data Encryption Standard)对称加密/解密</span></a></h2><p>DES 是一种对称加密算法，所谓对称加密算法就是：加密和解密使用相同密钥的算法。DES 加密算法出自 IBM 的研究，后来被美国政府正式采用，之后开始广泛流传。</p><p>但近些年使用越来越少，因为 DES 使用 56 位密钥，以现代的计算能力，24 小时内即可被破解。</p><p>使用 Java 实现 DES 加密解密，注意密码长度要是 8 的倍数。加密和解密的 Cipher 构造参数一定要相同，不然会报错。</p><p>DES 一共有四种加密模式：</p><ul><li>电子密码本模式（ECB）</li><li>加密分组链接模式（CBC）</li><li>加密反馈模式（CFB）</li><li>输出反馈模式（OFB）</li></ul><h2 id="_3des" tabindex="-1"><a class="header-anchor" href="#_3des"><span>3DES</span></a></h2><p>它是 DES 向 AES 过渡的加密算法，使用 3 条 56 位的密钥对数据进行三次加密。是 DES 的一个更安全的变形。</p><p>它以 DES 为基本模块，通过组合分组方法设计出分组加密算法。比起最初的 DES，3DES 更为安全。</p><h2 id="aes-advanced-encryption-standard-加密-解密" tabindex="-1"><a class="header-anchor" href="#aes-advanced-encryption-standard-加密-解密"><span>AES（Advanced Encryption Standard） 加密/解密</span></a></h2><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES）， 在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。</p><p>这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用。</p><p>简单说就是 DES 的增强版，比 DES 的加密强度更高。</p><p>AES 一共有四种加密模式：</p><ul><li>电子密码本模式（ECB）</li><li>加密分组链接模式（CBC）</li><li>加密反馈模式（CFB）</li><li>输出反馈模式（OFB）</li></ul><h2 id="hmac-hash-message-authentication-code-散列消息鉴别码" tabindex="-1"><a class="header-anchor" href="#hmac-hash-message-authentication-code-散列消息鉴别码"><span>HMAC(Hash Message Authentication Code，散列消息鉴别码)</span></a></h2><p>使用一个密钥生成一个固定大小的小数据块，即MAC，并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证。</p><h2 id="恺撒加密" tabindex="-1"><a class="header-anchor" href="#恺撒加密"><span>恺撒加密</span></a></h2><p>它是一种替换加密的技术，明文中的所欲字母都在字母表上向后（或向前）按照一个固定的数目进行偏移后被替换成密文。</p><h2 id="sha-secure-hash-algorithm-安全散列算法" tabindex="-1"><a class="header-anchor" href="#sha-secure-hash-algorithm-安全散列算法"><span>SHA(Secure Hash Algorithm，安全散列算法)</span></a></h2><p>SHA全名叫做安全散列算法，是FIPS所认证的安全散列算法。</p><p>能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。</p><p>且若输入的消息不同，它们对应到不同字符串的机率很高。</p><h2 id="rsa-加密-解密" tabindex="-1"><a class="header-anchor" href="#rsa-加密-解密"><span>RSA 加密/解密</span></a></h2><p>RSA算法是一种非对称加密算法，所谓非对称就是该算法需要一对密钥，若使用其中一个加密， 则需要用另一个才能解密。</p><p>目前它是最有影响力和最常用的公钥加密算法，能够抵抗已知的绝大多数密码攻击。</p><p>从提出到现今的三十多年里，经历了各种攻击的考验，逐渐为人们接受，普遍认为是目前最优秀的公钥方案之一。</p><p>该算法基于一个的数论事实： 将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。</p><p>由于进行的都是大数计算，RSA 最快的情况也比 DES 慢上好几倍， 比对应同样安全级别的对称密码算法要慢 1000 倍左右。</p><p>所以 RSA 一般只用于少量数据加密，比如说交换对称加密的密钥。</p><h2 id="pbe-加密-解密" tabindex="-1"><a class="header-anchor" href="#pbe-加密-解密"><span>PBE 加密/解密</span></a></h2><p>PBE是一种基于口令的加密算法，使用口令代替其他对称加密算法中的密钥， 其特点在于口令由用户自己掌管，不借助任何物理媒体；</p><p>采用随机数（这里我们叫做盐）杂凑多重加密等方法保证数据的安全性。</p><p>PBE算法是对称加密算法的综合算法，常见算法PBEWithMD5AndDES,使用MD5和DES算法构建了PBE算法。</p><p>将盐附加在口令上，通过消息摘要算法经过迭代获得构建密钥的基本材料， 构建密钥后使用对称加密算法进行加密解密。</p><p>算法/密钥长度/默认密钥长度：</p><ul><li>1.PBEWithMD5AndDES/56/56</li><li>2.PBEWithMD5AndTripleDES/112,168/168</li><li>3.PBEWithSHA1AndDESede/112,168/168</li><li>4.PBEWithSHA1AndRC2_40/40 to 1024/128</li></ul><p>工作模式：CBC</p><p>填充方式：PKCS5Padding</p>',47)]))}const h=e(s,[["render",p],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/posts/cryptography/java/","title":"Java 加解密算法","lang":"zh-CN","frontmatter":{"title":"Java 加解密算法","shortTitle":"Java 加解密算法","icon":"file","category":["加解密"],"tag":["Java","加解密算法"],"description":"Java 加解密算法","head":[["meta",{"name":"keywords","content":"Java,加解密算法"}],["meta",{"property":"og:url","content":"https://codealy.top/posts/cryptography/java/"}],["meta",{"property":"og:site_name","content":"进击的沐沐"}],["meta",{"property":"og:title","content":"Java 加解密算法"}],["meta",{"property":"og:description","content":"Java 加解密算法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T08:33:49.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"加解密算法"}],["meta",{"property":"article:modified_time","content":"2024-11-08T08:33:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 加解密算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-08T08:33:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沐沐\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"BASE64加密/解密","slug":"base64加密-解密","link":"#base64加密-解密","children":[]},{"level":2,"title":"MD5(Message Digest Algorithm)加密","slug":"md5-message-digest-algorithm-加密","link":"#md5-message-digest-algorithm-加密","children":[]},{"level":2,"title":"DES(Data Encryption Standard)对称加密/解密","slug":"des-data-encryption-standard-对称加密-解密","link":"#des-data-encryption-standard-对称加密-解密","children":[]},{"level":2,"title":"3DES","slug":"_3des","link":"#_3des","children":[]},{"level":2,"title":"AES（Advanced Encryption Standard） 加密/解密","slug":"aes-advanced-encryption-standard-加密-解密","link":"#aes-advanced-encryption-standard-加密-解密","children":[]},{"level":2,"title":"HMAC(Hash Message Authentication Code，散列消息鉴别码)","slug":"hmac-hash-message-authentication-code-散列消息鉴别码","link":"#hmac-hash-message-authentication-code-散列消息鉴别码","children":[]},{"level":2,"title":"恺撒加密","slug":"恺撒加密","link":"#恺撒加密","children":[]},{"level":2,"title":"SHA(Secure Hash Algorithm，安全散列算法)","slug":"sha-secure-hash-algorithm-安全散列算法","link":"#sha-secure-hash-algorithm-安全散列算法","children":[]},{"level":2,"title":"RSA 加密/解密","slug":"rsa-加密-解密","link":"#rsa-加密-解密","children":[]},{"level":2,"title":"PBE 加密/解密","slug":"pbe-加密-解密","link":"#pbe-加密-解密","children":[]}],"git":{"createdTime":1730883058000,"updatedTime":1731054829000,"contributors":[{"name":"yueny","email":"yueny09@163.com","commits":2}]},"readingTime":{"minutes":4.65,"words":1395},"filePathRelative":"posts/cryptography/java/readme.md","localizedDate":"2024年11月6日","excerpt":"\\n<h2>BASE64加密/解密</h2>\\n<p>Base64 编码是我们程序开发中经常使用到的编码方法，它用 64 个可打印字符来表示二进制数据。</p>\\n<p>这 64 个字符是：小写字母 a-z、大写字母 A-Z、数字 0-9、符号\\"+\\"、\\"/\\"（再加上作为垫字的\\"=\\"，实际上是 65 个字符），其他所有符号都转换成这个字符集中的字符。</p>\\n<p>Base64 编码通常用作存储、传输一些二进制数据编码方法，所以说它本质上是一种将二进制数据转成文本数据的方案。</p>\\n<h2>MD5(Message Digest Algorithm)加密</h2>\\n<p>MD5 是将任意长度的数据字符串转化成短小的固定长度的值的单向操作，任意两个字符串不应有相同的散列值。\\n因此 MD5 经常用于校验字符串或者文件。</p>"}');export{h as comp,o as data};
